/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
"use client"
import React, { useRef } from "react"
import { useGLTF } from "@react-three/drei"
import { useFrame } from "@react-three/fiber"
import { Group, Mesh, Material } from "three"
import type { ThreeElements } from "@react-three/fiber"

type GLTFResult = {
  nodes: {
    [key: string]: Mesh
  }
  materials: {
    [key: string]: Material
  }
}

export default function Wizard(props: ThreeElements["group"]) {
  const { nodes, materials } = useGLTF("/models/wizard-transformed.glb") as unknown as GLTFResult

  const modelRef = useRef<Group>(null)

  useFrame((state) => {
    if (modelRef.current) {
      modelRef.current.position.y = -1.5 + Math.sin(state.clock.elapsedTime) * 0.15
    }
  })

  return (
    <group
      {...props}
      dispose={null}
      ref={modelRef}
      position={[0, -1.5, 0]}
      scale={[0.05, 0.05, 0.05]}
      rotation={[0.25, 0, 0]}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Evil_Hathattty_mesh_Evil_HatBLN_Hat_0.geometry}
        material={materials.Evil_HatBLN_Hat}
        position={[-1.057, 0, 0]}
        rotation={[0, 0.224, 0]}
        scale={0.832}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.WandpCylinder1_Wandq_0.geometry}
        material={materials.PaletteMaterial001}
        position={[-1.057, 0, 0]}
        rotation={[0, 0.224, 0]}
        scale={0.832}
      />
      {/* ... keep all your other meshes the same way */}
    </group>
  )
}

useGLTF.preload("/models/wizard-transformed.glb")
